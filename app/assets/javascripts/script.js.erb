
/* All ajax requests are sending authenticty token*/
$(document).ajaxSend(function(event, request, settings) {
  if (typeof(AUTH_TOKEN) == "undefined") return;
  // settings.data is a serialized string like "foo=bar&baz=boink" (or null)
  settings.data = settings.data || "";
  settings.data += (settings.data ? "&" : "") + "authenticity_token=" + encodeURIComponent(AUTH_TOKEN);
});

$(document).ready(function() {
  
  /*  For the Subject-teacher assignment 
    or
      For the Course-teacher assignment
  */
  $(".is_checked_class").change( function(){
    var $checkbox = $(this);
    var after_clicked_value;
    
    /*
      Extracting the value of the checkbox, based on the user action
    */
    if(   $checkbox.is(":checked")  ) {
      $checkbox.attr('value', <%= TRUE_CHECK %>);
    }else{
      $checkbox.attr( 'value', <%= FALSE_CHECK %> );
    }
    
  });
  
  
  $("a.close").live("click", function(){
    var $this = $(this);
    var $container = $(this).parents(".alert");
    $container.fadeOut();
    $container.remove();
    return false;
  });
  
  
  // $(".alert-message").alert()
  
  
  //  ajax post 
  $("#save_button").click(function(){
    var destination_url = $("#destination_url").attr("value");
    
    
    var selection_array = [];
    $(".is_checked_class").each(function(){
      var $input_checkbox = $(this);
      
      // console.log( "teacher id is " + teacher_id);
      var teacher_id = $input_checkbox.attr("id").split("_")[1];
      //  check the checked value.. if it is , send 1 to server, if it is not, send 0 to server
      var object = {};
      object["user"] =  teacher_id; // the id
      object["value"]  = $input_checkbox.attr("value"); 
      selection_array.push( object );
    });
    
    
    selection_array =  JSON.stringify(selection_array);
    $.ajax({
      url : destination_url, 
      type : "POST",
      data : selection_array,
      dataType : 'script',
      success : function( response ) {
        // $whole_container.hideLoading();
      }
    });
    
  });
  
  
  
  /* AjaxForm, auto submit */
  $("form.ajaxform").live('submit',function(){
     var $this = $(this);
     var destination = $(this).attr('action');
     var $form_container = $this.parent();
     $this.showLoading();
   	$.ajax({
   		url: destination,
   		type: "POST",
   		data: $(this).serialize(),
   		dataType: 'script',
   		success: function(response){
   		  console.log("Yeah baby, we are cleared");
   		  $this.clearForm();
        $this.hideLoading();
        PilipotoJcropApi.release();
   		}
   	});
   	return false;
   });
   
   
   
   /* Respond to clicking Reply -> first child comment creation .. we have to use event delegation for 
   these 2 shites. or else, too dangerous. crash, if there are too many comments*/
   $("a.first_root_comment_clicker").live('click', function(){
     var $this = $(this);
     var $container = $(this).parents(".first_child_comment_wrapper");
     var $form = $(".first_child_form", $container);

     $this.hide();
     $form.fadeIn();

     return false;
   });

   $("a.cancel_first_child_comment").live('click', function(){
     var $this = $(this);
     var $container = $(this).parents(".first_child_comment_wrapper");
     var $form = $(".first_child_form", $container);
     var $reply_button = $(".first_root_comment_clicker", $container);

     $form.hide();
     $reply_button.show();
     return false;
   });
   
   
   
   /* 
   FOR THE CHILD COMMENT
   Respond to clicking Reply -> first child comment creation .. we have to use event delegation for 
   these 2 shites. or else, too dangerous. crash, if there are too many comments*/
   $("a.child_comment_clicker").live('click', function(){
     var $this = $(this);
     var $container = $(this).parents(".child_comment_wrapper");
     var $form = $(".child_form", $container);

     $this.hide();
     $form.fadeIn();

     return false;
   });

   $("a.cancel_child_comment").live('click', function(){
     var $this = $(this);
     var $container = $(this).parents(".child_comment_wrapper");
     var $form = $(".child_form", $container);
     var $reply_button = $(".child_comment_clicker", $container);

     $form.hide();
     $reply_button.show();
     return false;
   });
   
   
   /* The event delegation */
   // $("ol.root_comment_wrapper").live('click', function(e){
   //    if ( $(e.target).hasClass("first_root_comment_clicker") ) {  
   //      var $this = $(e.target);
   //      var $container = $(this).parents(".first_child_comment_wrapper");
   //      var $form = $(".first_child_form", $container);
   // 
   //      $this.hide();
   //      $form.fadeIn();
   // 
   //      return false;
   //    }
   // 
   //    if ( $(e.target).hasClass("cancel_first_child_comment") ) {  
   //      var $this = $(e.target);
   //      var $container = $this.parents(".first_child_comment_wrapper");
   //      var $form = $(".first_child_form", $container);
   //      var $reply_button = $(".first_root_comment_clicker", $container);
   // 
   //      $form.hide();
   //      $reply_button.show();
   //      return false;
   //    }
   // 
   //  });
   //  
   
 
});


$.fn.clearForm = function() {
  return this.each(function() {
    var type = this.type, tag = this.tagName.toLowerCase();
    if (tag == 'form')
      return $(':input',this).clearForm();
    if (type == 'text' || type == 'password' || tag == 'textarea')
      this.value = '';
    else if (type == 'checkbox' || type == 'radio')
      this.checked = false;
    else if (tag == 'select')
      this.selectedIndex = -1;
  });
};

