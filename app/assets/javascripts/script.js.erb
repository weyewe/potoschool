
/* All ajax requests are sending authenticty token*/
$(document).ajaxSend(function(event, request, settings) {
  if (typeof(AUTH_TOKEN) == "undefined") return;
  // settings.data is a serialized string like "foo=bar&baz=boink" (or null)
  settings.data = settings.data || "";
  settings.data += (settings.data ? "&" : "") + "authenticity_token=" + encodeURIComponent(AUTH_TOKEN);
});

$(document).ready(function() {
  
  
  $(".entry-link").click(function(){
    var $entry_link = $(this);
    
    
    var text = "" ; 
    if( $entry_link.hasClass("entry-closer")){
      text = "Are you sure to close this entry?"
    }else if ($entry_link.hasClass("entry-recover")){
      text = "Are you sure to recover this entry?"
    }
    
    if( confirm( text ) ){
      var entry_id = $(this).attr('id').split("_")[1];

      var $form = $("#close-entry form");
      var $input_entry_id = $("#entry_id");

      $input_entry_id.attr("value", entry_id );
      
      $entry_link.showLoading();

      $.ajax({
        url: $form.attr("action"),
        type: "POST",
        data: $form.serialize(),
        dataType: 'script',
        success: function(response){

          $form.clearForm();
          $checkbox.hideLoading();
        }
      });
    }
    
    return false;
  });

  
  // assignment related methods 
  $(".checkbox_tracker").change( function(){
    var $checkbox = $(this);
    var after_clicked_value;
    
    /*
      Extracting the value of the checkbox, based on the user action
    */
    if(   $checkbox.is(":checked")  ) {
      $checkbox.attr('value', <%= TRUE_CHECK %>);
      after_clicked_value = <%= TRUE_CHECK %>;
    }else{
      $checkbox.attr( 'value', <%= FALSE_CHECK %> );
       after_clicked_value = <%= FALSE_CHECK %>;
    }
    
    
    var checkbox_id = $checkbox.attr("id");
    var provider_id = checkbox_id.split("-")[0].split("_")[1];
    var consumer_id = checkbox_id.split("-")[1].split("_")[1];

    var $form = $("#checkbox_form_wrapper form");

    var provider_field = $("#membership_provider");
    provider_field.attr('value', provider_id);
    var consumer_field = $("#membership_consumer");
    consumer_field.attr('value', consumer_id);
    
    var decision_field = $("#membership_decision");
    decision_field.attr("value", after_clicked_value )

    if($checkbox.hasClass("single-submit")){
      $form.trigger('submit');
    }else {


      $checkbox.showLoading();

      $.ajax({
        url: $form.attr("action"),
        type: "POST",
        data: $form.serialize(),
        dataType: 'script',
        success: function(response){
          
          $form.clearForm();
          $checkbox.hideLoading();
        }
      });
    }
  });
  
  
  /*  For the Subject-teacher assignment 
    or
      For the Course-teacher assignment
  */
  $(".is_checked_class").change( function(){
    var $checkbox = $(this);
    var after_clicked_value;
    
    /*
      Extracting the value of the checkbox, based on the user action
    */
    if(   $checkbox.is(":checked")  ) {
      $checkbox.attr('value', <%= TRUE_CHECK %>);
    }else{
      $checkbox.attr( 'value', <%= FALSE_CHECK %> );
    }
    
  });
  
  
  $("a.close").live("click", function(){
    var $this = $(this);
    var $container = $(this).parents(".alert");
    $container.fadeOut();
    $container.remove();
    return false;
  });
  
  
  // $(".alert-message").alert()
  
  
  //  ajax post 
  $("#save_button").click(function(){
    var destination_url = $("#destination_url").attr("value");
    
    
    var selection_array = [];
    $(".is_checked_class").each(function(){
      var $input_checkbox = $(this);
      
      // console.log( "teacher id is " + teacher_id);
      var teacher_id = $input_checkbox.attr("id").split("_")[1];
      //  check the checked value.. if it is , send 1 to server, if it is not, send 0 to server
      var object = {};
      object["user"] =  teacher_id; // the id
      object["value"]  = $input_checkbox.attr("value"); 
      selection_array.push( object );
    });
    
    
    selection_array =  JSON.stringify(selection_array);
    $.ajax({
      url : destination_url, 
      type : "POST",
      data : selection_array,
      dataType : 'script',
      success : function( response ) {
        // $whole_container.hideLoading();
      }
    });
    
  });
  
  
  
  /* AjaxForm, auto submit */
  $("form.ajaxform").live('submit',function(){
     var $this = $(this);
     var destination = $(this).attr('action');
     var $form_container = $this.parent();
     $this.showLoading();
   	$.ajax({
   		url: destination,
   		type: "POST",
   		data: $(this).serialize(),
   		dataType: 'script',
   		success: function(response){
   		  $this.clearForm();
        $this.hideLoading();
        PilipotoJcropApi.release();
   		}
   	});
   	return false;
   });
   
   
   /* AjaxForm, special for grading approval */
   
   $(".grading-button").live('click', function(){
     var $this = $(this);
     var $form = $this.parents("form.grading-ajaxform"); 
     var destination = $form.attr('action');
     var $table = $("table", $form);
     
     if( $this.attr("id") == "approve_submission" ){
       $("#approval_code").attr('value',  '<%= ACCEPT_SUBMISSION %>' );
     }else {
       $("#approval_code").attr('value',  '<%= REJECT_SUBMISSION %>' );
     }
     
     
     $form.showLoading();
     $.ajax({
       url  : destination,
       type : "POST",
       data : $form.serialize(),
       dataType :'script',
       success: function(response){
         $form.clearForm();
         $form.hideLoading();
         //  the response is a script, removing the form 
       }
     });
     return false; 
     
   });
   
   /*
   Ajax for Grade Editor
   */
   
   $("#picture_grade_edit_button").live("click",function(){
     $("#grader_form").fadeIn();
     return false; 
   });
   
   $("#picture_grade_cancel_button").live("click", function(){
     $("#grader_form").fadeOut();
     return false; 
   });
   
   
   $("#grader_form").live("submit", function(){
     
     var $form = $(this);
     // var $form_closer = $("#picture_grade_cancel_button");
     var $score = $("#picture_score");
     var score = parseInt( $score.attr("value") );
     if( isNaN(score) ) {
       alert("Please enter the valid score.");
       // return false; 
     }else if( score < 0 || score > 100){
       alert("Score can only be within range 0-100.");
       // return false 
     }else{
       if( confirm("Are you sure to set the grade: " + score ) ) {
         // alert("hahah, yeah, AJAX SENT");
         // return false;
         var destination = $form.attr('action');
         $form.showLoading();
          $.ajax({
            url  : destination,
            type : "POST",
            data : $form.serialize(),
            dataType :'script',
            success: function(response){
              $form.clearForm();
              $form.hideLoading();
              $form.fadeOut();
              //  the response is a script, removing the form 
            }
          });
          
          
       }else{
         // return false; 
       }
     }
     
     return false ;
   });
   
   // $("form.grading-ajaxform").live('submit',function(){
   //           var $this = $(this);
   //           var destination = $(this).attr('action');
   //           var $form_container = $this.parent();
   //           $this.showLoading();
   //          $.ajax({
   //            url: destination,
   //            type: "POST",
   //            data: $(this).serialize(),
   //            dataType: 'script',
   //            success: function(response){
   //              $this.clearForm();
   //              $this.hideLoading();
   //              PilipotoJcropApi.release();
   //            }
   //          });
   //          return false;
   //         });
   
   /*
    Respond to clicking New Feedback 
   */
   $("a.non_positional_root_comment_clicker").live("click", function(){
     var $this = $(this);
     var $container = $(this).parents("#non_positional_root_comment_wrapper");
     var $form = $("form", $container);
     
     $this.hide();
     $form.fadeIn();
     $(".comment_body", $form).focus();
     return false ;
   });
   
   $('#cancel-non-positional-comment').live("click", function(){
     var $this = $(this);
     var $container = $(this).parents("#non_positional_root_comment_wrapper");
     var $form = $("form", $container);
     
     var $clicker = $(".non_positional_root_comment_clicker", $container);
     $clicker.show();
     $form.hide(); 
     $form.clearForm();
     return false;
      
   });
   
   
   /* Respond to clicking Reply -> first child comment creation .. we have to use event delegation for 
   these 2 shites. or else, too dangerous. crash, if there are too many comments*/
   $("a.first_root_comment_clicker").live('click', function(){
     var $this = $(this);
     var $container = $(this).parents(".first_child_comment_wrapper");
     var $form = $(".first_child_form", $container);

     $this.hide();
     $form.fadeIn();
     $(".comment_body_text_area", $form).focus();
     return false;
   });

   $("a.cancel_first_child_comment").live('click', function(){
     var $this = $(this);
     var $container = $(this).parents(".first_child_comment_wrapper");
     var $form = $(".first_child_form", $container);
     var $reply_button = $(".first_root_comment_clicker", $container);

     $(".comment_body_text_area", $form).blur();
     $form.hide();
     $reply_button.show();
     return false;
   });
   
   
   
   /* 
   FOR THE CHILD COMMENT
   Respond to clicking Reply -> first child comment creation .. we have to use event delegation for 
   these 2 shites. or else, too dangerous. crash, if there are too many comments*/
   $("a.child_comment_clicker").live('click', function(){
     var $this = $(this);
     var $container = $(this).parents(".child_comment_wrapper");
     var $form = $(".child_form", $container);
     
     
     $this.hide();
     $form.fadeIn();
     $(".comment_body_text_area", $form).focus();
     
     return false;
   });

   $("a.cancel_child_comment").live('click', function(){
     var $this = $(this);
     var $container = $(this).parents(".child_comment_wrapper");
     var $form = $(".child_form", $container);
     var $reply_button = $(".child_comment_clicker", $container);


     $(".comment_body_text_area", $form).blur();
     $form.hide();
     $reply_button.show();
     return false;
   });
   


   $('.transloadit-input').change(function(){
      
     var $this = $(this);
     var $form = $this.parents("form");
     var $feedback_paragraph = $("p.feedback", $form);
     var $submit_button = $(".submit-button", $form);
     var file_location = $(this).val();
    
     
     var regex_of_image_format =  /(\.(jpg|jpeg|tiff|png|gif|bmp))$/i  ;
     var regex_of_document_format = /(\.(doc|docx|ppt|pptx|pps|ppsx|xls|xlsx|pdf))$/i  ; 
     
     if ($(this).val()) {
       //  we should check the filetype as well! if it is only for documents
       // show the notification 

       if( $form.attr("id") == "upload_picture" || $form.attr("id") == "upload_picture_revision"){
         if( hasFileFormat( file_location, regex_of_image_format ) ){
           $feedback_paragraph.html('');
           $submit_button.show();
         }else{
           // give notification that it has to be in image format
           $feedback_paragraph.html('<b>Your file has to be in one of these format:<br />' +
            'jpg, jpeg, png, tiff, gif, or bmp' + '</b>');
            $submit_button.hide();
         }
         
       }else if( $form.attr("id") == "upload_document" || $form.attr("id") == "upload_document_revision") {
         // Notify that it has to be in the right format 
         if( hasFileFormat( file_location, regex_of_document_format ) ){
           $feedback_paragraph.html('');
           $submit_button.show();
         }else{
           $feedback_paragraph.html('<b>Your file has to be in one of these format:<br />' + 
            'word(.doc, .docx), powerpoint(.ppt, .pptx, .pps, .ppsx), excel(.xls, .xslx), or pdf(.pdf)' + 
            '</b>');
            $submit_button.hide();
         }
       }
       
       
     }else{
       $submit_button.hide();
     }
   });


       
   /* For positional comment */
   
  $(window).resize(function(){
    refreshMap();
  });
  
  
   $("form.delete_pic").submit(function(){
     // alert("willy 1234");
     
     if( confirm("Are you sure to delete picture?") ){
       
     }else{
       return false; 
     }
     
   });
   
 
});


$.fn.clearForm = function() {
  return this.each(function() {
    var type = this.type, tag = this.tagName.toLowerCase();
    if (tag == 'form')
      return $(':input',this).clearForm();
    if (type == 'text' || type == 'password' || tag == 'textarea')
      this.value = '';
    else if (type == 'checkbox' || type == 'radio')
      this.checked = false;
    else if (tag == 'select')
      this.selectedIndex = -1;
  });
};

/*
This one is to refresh map after positional comment creation 
*/
function refreshMap(){
  // console.log("refresh map normal");
  var $switcher = $("#pilipoto-switcher"); 
  var $wrapper, scaling_ratio; 
  var normal_image_wrapper_width = parseInt(  <%= DISPLAY_IMAGE_WIDTH %> );
  var marker_width_adjustment = parseInt(  <%= POSITIONAL_COMMENT_MARKER_WIDTH %> )/2; 
  // var marker_width_adjustment = 44/2; 
    // console.log("marker_width_adjustment: " + marker_width_adjustment);
  
  
  if(  $switcher.hasClass("croppingMode")){
    $wrapper = $("#cropper_wrapper");
    var wrapper_width = parseInt( $wrapper.width()  );
    scaling_ratio = wrapper_width / normal_image_wrapper_width;
    refreshJCropBinding();
    
    
    
  }else if($switcher.length == 0 ||  $switcher.hasClass("waitMode")){
    // no switcher at all. 
    $wrapper = $("#display_wrapper");
    var wrapper_width = parseInt( $wrapper.width()  );
    scaling_ratio = wrapper_width / normal_image_wrapper_width;
  }
  
   $(".positional_comment_wrapper", $wrapper).each(function(){
        var $this = $(this);
        var x_start = parseInt(  $(".x_start", $this ).attr("value")) ;
        var y_start = parseInt(  $(".y_start", $this ).attr("value")  )  ; 
  
        var final_x_start = x_start * scaling_ratio - marker_width_adjustment;
        var final_y_start = y_start * scaling_ratio- marker_width_adjustment;
     
        var $tag = $(".tag", $this);
        $tag.css("left", final_x_start.toString() + "px" );
        $tag.css("top", final_y_start.toString() + "px" );
        
        $this.removeClass("hide");
   });
   
   
   /* delete virgin pic */
  
}

function refreshMapAfterClick(){
  // console.log("refresh map after click");
  
  var $switcher = $("#pilipoto-switcher"); 
  var $wrapper, scaling_ratio; 
  var normal_image_wrapper_width = parseInt(  <%= DISPLAY_IMAGE_WIDTH %>);
  var marker_width_adjustment = parseInt(  <%= POSITIONAL_COMMENT_MARKER_WIDTH %>)/2; 
  
  // var marker_width_adjustment = 44/2; 
  // console.log("marker_width_adjustment: " + marker_width_adjustment);
  
  
  if( $switcher.hasClass("croppingMode")){
    // so, the switcher has gone from waitMode to croppingMode to the waitMode
    // (we need to rearrange the displayWrapper) 
    // or there is no switcher at all 

    $wrapper = $("#cropper_wrapper");
    var wrapper_width = parseInt( $wrapper.width()  );
    scaling_ratio = wrapper_width / normal_image_wrapper_width;
    
  }else if( $switcher.hasClass("waitMode")){
    $wrapper = $("#display_wrapper");
    var wrapper_width = parseInt( $wrapper.width()  );
    scaling_ratio = wrapper_width / normal_image_wrapper_width;
  }
  
 
  
   $(".positional_comment_wrapper", $wrapper).each(function(){
        var $this = $(this);
        var x_start = parseInt(  $(".x_start", $this ).attr("value")) ;
        var y_start = parseInt(  $(".y_start", $this ).attr("value")  )  ; 
  
        var final_x_start = x_start * scaling_ratio - marker_width_adjustment ;
        var final_y_start = y_start * scaling_ratio - marker_width_adjustment ;
     
        var $tag = $(".tag", $this);
        $tag.css("left", final_x_start.toString() + "px" );
        $tag.css("top", final_y_start.toString() + "px" );
        
        $this.removeClass("hide");
   });
   
   
 
   
}


function is_mobile() {

  var mobile = (/iphone|ipad|ipod|android|blackberry|mini|windows\sce|palm/i.test(navigator.userAgent.toLowerCase()));  
  if (mobile) {  
    return true;
  }

  return false; 


}



function hasFileFormat( file_location, regex_matcher ) {
  
  if( file_location.match( regex_matcher) ){
    return true;
  }else{
    return false ;
  }
}

function fileTypeFromExt(val, def) {
  // http://support.transloadit.com/discussions/questions/133-restricting-uploads-by-file-type
  var
      ext = val.split('.').pop().toLowerCase(),
      type = def,
      imageExtensions = ['jpg', 'jpeg', 'tiff', 'png', 'gif', 'bmp'];

  for (var i = 0; i < imageExtensions.length; i++) {
      if (imageExtensions[i] == ext) {
          type = 'image';
          break;
      }
  }
  return type;
  
}


function summonModal(header_text, body_text, modal_id){
  var $modal_wrapper = $("#" + modal_id); 
  var $header = $(".modal-header h3", $modal_wrapper);
  var $body  = $(".modal-body p", $modal_wrapper);
  var $modal_closer = $(".modal-footer .modal-closer ", $modal_wrapper);
  // setting the header text
  $header.text( header_text );
  $body.text( body_text );
  
  $modal_wrapper.modal('show');
  
  $modal_closer.click(function(){
    // console.log("Oh yeah baby, closed");
    $modal_wrapper.modal('hide');
    return false;
  });
}

function summonGalleryModalHTML(display_image_url, modal_id ){
  var $modal_wrapper = $("#" + modal_id); 
  // var $header = $(".modal-header", $modal_wrapper);
  var $body  = $(".modal-body", $modal_wrapper);
  var $modal_closer = $(".modal-footer .modal-closer ", $modal_wrapper);
  // setting the header text
  // $header.html( "<h1>Display Image</h1>" );
  // $body.html( "<p>This is the content</p>" );
  
  
  // $modal_wrapper.modal('show');

  $modal_wrapper.modal({
    backdrop: true,
    keyboard: true
  }).css({
    width: '650px'
  });

  // $("<img id='modalImage' src='' />").appendTo("#modal_image_wrapper");
      
  $body.showLoading();
     
     $("#modalImage").loadImage(display_image_url,function(){
       // $(this).css({height:'120px'});//alter the css styling after the image has loaded
       $body.hideLoading();
     });
  
  $modal_closer.click(function(){
    
    $modal_wrapper.modal('hide');
    $("#modalImage").attr("src", '');
    return false;
  });
}


(function( $ ) {
  $.fn.loadImage = function(src,cb,image) {
    // console.log("calling me: " +  (new Date).getTime() );
    var self = this,
    image = image || new Image();
    setTimeout(function() {
      if (image.src != src)
        image.src = src;
      if (!image.complete)
        return self.loadImage(src,cb,image)

      $(self).attr('src',src)
      cb.call(self)
    },50);
  };
})( jQuery );


